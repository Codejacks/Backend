syntax = "proto3";

package Corona;

option csharp_namespace = "TraceDefense.Entities.Protos";

// Phone -> Server; Request to get size of messages queued for a region since last query time
message MessageSizeRequest {
  Region region = 1;
  UTCTime last_query_time = 2;
}

// Server -> Phone; Provide size of query in bytes of the response
message MessageSizeResponse {
  int64 size_of_query_response = 1;
}

// Phone -> Server;
// Get list of messages queued for a region since last query time
message MessageListRequest {
  Region region = 1;
  UTCTime last_query_time = 2;
}

// Server -> Phone; list of messages for region
message MessageListResponse { repeated MessageInfo message_info = 1; }

// Phone -> Server GetMessages(new_message_ids)
// Request to download the details of given query ids
message MessageRequest { repeated MessageInfo requested_queries = 1; }

// Server -> Phone (list of messages corresponding to touch points where
// infection can occour)
message MatchMessage {
  // Not used at the moment.  Will eventually express a boolean relationship between
  // elements in the area_match and bluetooth_match collections
  string bool_expression = 1;
  // at or around <place[]> for more than <duration> around <time[]>
  repeated AreaMatch area_matches = 2;
  // near <person>; where person is identified by some kind of blue tooth beacon
  repeated BluetoothMatch bluetooth_matches = 3;
}

// Phone -> Server;
// Add a new message for the specified region with some match criteria
message AnnounceRequest {
  MatchMessage match_criteria = 1;
  Region region = 2;
}

// Server -> Phone
// Response to announce request.
message AnnounceResponse {
  Status status = 1;
}

// Contains status that details success (0) or failure (>0)
// and has message that details the failure.
message Status {
  int32 status_code = 1;
  string status_message = 2;
}

// Represents a geographic region quantized by precision of lat/long
message Region {
  double lattitude_prefix = 1;
  double longitude_prefix = 2;
  // Mantissa mask.  Number of bits of Mantissa that should be preserved
  int32 precision = 3;
}

// Metadata about each query
message MessageInfo {
  string message_id = 1;
  UTCTime message_timestamp = 2;
}

// List of blue tooth beacons
message BluetoothMatch {
  // bluetooth_query Message to be displayed to the user if there is a match
  CryptoMessage user_message = 1;
  // Anonymized blue tooth beacons (or other exact match identifiers if
  // available)
  repeated BlueToothSeed seeds = 2;
}

message BlueToothSeed{
  string seed = 1;
  UTCTime sequence_start_time = 2;
}

// Cryptographically signed message
// to be displayed to the user
message CryptoMessage {
  string message_data = 1;
  string signed_message = 2;
  string public_key = 3;
}

// List of locations
message AreaMatch {
  // Message to be displayed to the user if there is a match
  CryptoMessage user_message = 1;
  repeated Area areas = 2;
}

message Area {
  Location location = 1;
  float radius_meters = 2;
  UTCTime begin_time = 3;
  UTCTime end_time = 4;
}

message UTCTime {
  int32 year = 1;
  int32 month = 2;
  int32 day = 3;
  int32 hour = 4;
  int32 minute = 5;
  int32 second = 9;
  int32 millisecond = 10;
}

message Location {
  double lattitude = 1;
  double longitude = 2;
}
