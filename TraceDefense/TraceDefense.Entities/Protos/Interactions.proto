syntax = "proto2";

package Corona;
option csharp_namespace = "TraceDefense.Entities.Protos";

// Phone -> Server; Request to get size of Query
message QuerySizeRequest {
  required Region region = 1;
  required UTCTime last_query_time = 2;
}

// Server -> Phone; Provide size of query in bytes of the response
message QuerySizeResponse {
  required int64 size_of_query_response = 1;
}

// Phone -> Server get_queries(coarse_region, last_query_time)
message QueryListRequest {
  required Region region = 1;
  required UTCTime last_query_time = 2;
}

// Server -> Phone list of queries for coarse_region
message QueryListResponse { repeated QueryInfo queryinfo = 1; }

// Phone -> Server download_queries(new_query_ids)
// Request to download the details of given query ids
message QueryRequest { repeated QueryInfo requested_queries = 1; }

// Server -> Phone (list of queries corresponding to touch points where
// infection can occour)
message ProximityQuery {
  // This is set to some constant on the server.
  required int32 message_version = 1 [default = 1];
  // at or around <place[]> for more than <duration> around <time[]>
  repeated GeoProximity geo_proximity = 2;
  // near <person>; where person is identified by some kind of blue tooth beacon
  repeated IDMatch id_list = 3;
}

// Represents a geographic region quantized by precision of lat/long
message Region {
  required double lattitude = 1;
  required double longitude = 2;
  // Mantissa mask.  Number of bits of Mantissa that should be preserved
  required int32 precision = 3;
}

// Metadata about each query
message QueryInfo {
  required string query_id = 1;
  required UTCTime query_timestamp = 2;
}

// List of blue tooth beacons
message IDMatch {
  // Message to be displayed to the user if there is a match
  required string user_message = 1;
  // Anonymized blue tooth beacons (or other exact match identifiers if
  // available)
  repeated string ids = 2;
}

// List of locations
message GeoProximity {
  // Message to be displayed to the user if there is a match
  required string user_message = 1;
  repeated LocationTime locations = 2;
  required float proximity_radius_meters = 3;
  required int32 duration_tolerance_secs = 4;
}

message LocationTime {
  required Location location = 1;
  required UTCTime time = 2;
}

message UTCTime {
  required int32 year = 1;
  required int32 month = 2;
  required int32 day = 3;
  required int32 hour = 4;
  required int32 minute = 5;
  required int32 second = 9;
  required int32 millisecond = 10;
}

message Location {
  required float lattitude = 1;
  required float longitude = 2;
  required float radius_meters = 3;
}